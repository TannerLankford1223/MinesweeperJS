{"ast":null,"code":"var _jsxFileName = \"/Users/tannerlankford/repos/MinesweeperJS/src/components/Field.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../styles/css/Field.css\";\nimport Cell from \"./Cell\";\nimport CreateBoard from \"../utils/CreateBoard\";\nimport revealCells from \"../utils/RevealCells\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Field(_ref) {\n  _s();\n\n  let {\n    setTimer,\n    flagsLeft,\n    setFlagsLeft,\n    restart,\n    setRestart,\n    setGameOver\n  } = _ref;\n  const [field, setField] = useState([]);\n  const [mines, setMines] = useState([]);\n  const [emptySpacesLeft, setEmptySpacesLeft] = useState(0);\n  const [timerID, setTimerID] = useState(0);\n  useEffect(() => {\n    if (restart === true) {\n      newField();\n      setRestart(false);\n      clearInterval(timerID);\n      setTimerID(setInterval(() => {\n        setTimer(prevTime => prevTime + 1);\n      }, 1000));\n    }\n\n    return () => {\n      clearInterval(timerID);\n    };\n  }, [restart]);\n  useEffect(() => {\n    setTimer(0);\n    clearInterval(timerID);\n    setTimerID(setInterval(() => {\n      setTimer(prevTime => prevTime + 1);\n    }, 1000));\n    return () => {\n      clearInterval(timerID);\n    };\n  }, [newField()]);\n  useEffect(() => {\n    checkForWin();\n  }, [field]);\n\n  const newField = () => {\n    const field = CreateBoard();\n    setMines(field.mines);\n    setField(field.board);\n    setEmptySpacesLeft(field.emptySpaces);\n    setFlagsLeft(10); // setTimer(0);\n  };\n\n  const checkForWin = () => {\n    if (emptySpacesLeft === 0 && flagsLeft === 0) {\n      alert(\"You win!\");\n    }\n  };\n\n  const addFlag = () => {\n    setFlagsLeft(prevCount => prevCount - 1);\n  };\n\n  const removeFlag = () => {\n    setFlagsLeft(prevCount => prevCount + 1);\n  };\n\n  const updateFlag = (e, x, y) => {\n    e.preventDefault();\n    let newField = JSON.parse(JSON.stringify(field));\n    let cell = newField[x][y];\n\n    if (!cell.fired) {\n      if (cell.flagged) {\n        removeFlag();\n        cell.flagged = false;\n      } else {\n        if (flagsLeft > 0) {\n          addFlag();\n          cell.flagged = true;\n        }\n      }\n\n      setField(newField);\n    }\n  };\n\n  const revealCell = (x, y) => {\n    let newBoard = JSON.parse(JSON.stringify(field));\n    let cell = newBoard[x][y];\n\n    if (cell.bomb) {\n      clearInterval(timerID);\n\n      for (let i = 0; i < mines.length; i++) {\n        newBoard[mines[i][0]][mines[i][1]].fired = true;\n      }\n\n      setField(newBoard);\n    } else {\n      let revealedSpaces = revealCells(newBoard, x, y, emptySpacesLeft);\n      setField(revealedSpaces.arr);\n      setEmptySpacesLeft(revealedSpaces.emptySpacesLeft);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"field\",\n    children: field.map((row, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((cell, index2) => {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            details: cell,\n            updateFlag: updateFlag,\n            revealCell: revealCell\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 36\n          }, this);\n        })\n      }, index1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Field, \"ro1hCL+NR12hIJnvyz2aqfq+HjE=\");\n\n_c = Field;\nexport default Field;\n\nvar _c;\n\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"names":["React","useEffect","useState","Cell","CreateBoard","revealCells","Field","setTimer","flagsLeft","setFlagsLeft","restart","setRestart","setGameOver","field","setField","mines","setMines","emptySpacesLeft","setEmptySpacesLeft","timerID","setTimerID","newField","clearInterval","setInterval","prevTime","checkForWin","board","emptySpaces","alert","addFlag","prevCount","removeFlag","updateFlag","e","x","y","preventDefault","JSON","parse","stringify","cell","fired","flagged","revealCell","newBoard","bomb","i","length","revealedSpaces","arr","map","row","index1","index2"],"sources":["/Users/tannerlankford/repos/MinesweeperJS/src/components/Field.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../styles/css/Field.css\"\nimport Cell from \"./Cell\";\nimport CreateBoard from \"../utils/CreateBoard\";\nimport revealCells from \"../utils/RevealCells\";\n\nfunction Field({ setTimer, flagsLeft, setFlagsLeft, restart, setRestart, setGameOver }) {\n    const [field, setField] = useState([]);\n    const [mines, setMines] = useState([]);\n    const [emptySpacesLeft, setEmptySpacesLeft] = useState(0);\n    const [timerID, setTimerID] = useState(0);\n\n\n    useEffect(() => {\n        if (restart === true) {\n            newField();\n            setRestart(false);\n            clearInterval(timerID);\n            setTimerID(setInterval(() => {\n                setTimer(prevTime => prevTime + 1);\n            }, 1000));\n        }\n        return () => {\n            clearInterval(timerID);\n        };\n    }, [restart]);\n\n    useEffect(() => {\n        setTimer(0);\n        clearInterval(timerID);\n        setTimerID(setInterval(() => {\n            setTimer(prevTime => prevTime + 1);\n        }, 1000));\n        return () => {\n            clearInterval(timerID);\n        };\n    }, [newField()])\n\n    useEffect(() => {\n        checkForWin();\n    }, [field])\n\n    const newField = () => {\n        const field = CreateBoard();\n        setMines(field.mines);\n        setField(field.board);\n        setEmptySpacesLeft(field.emptySpaces);\n        setFlagsLeft(10);\n        // setTimer(0);\n    }\n\n    const checkForWin = () => {\n        if (emptySpacesLeft === 0 && flagsLeft === 0) {\n            alert(\"You win!\");\n        }\n    }\n\n    const addFlag = () => {\n        setFlagsLeft(prevCount => prevCount - 1);\n    }\n\n    const removeFlag = () => {\n        setFlagsLeft(prevCount => prevCount + 1);\n    }\n\n    const updateFlag = (e, x, y) => {\n        e.preventDefault();\n        let newField = JSON.parse(JSON.stringify(field));\n        let cell = newField[x][y];\n        if (!cell.fired) {\n            if (cell.flagged) {\n                removeFlag();\n                cell.flagged = false;\n            } else {\n                if (flagsLeft > 0) {\n                    addFlag();\n                    cell.flagged = true;\n                }\n            }\n            setField(newField);\n        }\n    }\n\n    const revealCell = (x, y) => {\n        let newBoard = JSON.parse(JSON.stringify(field));\n        let cell = newBoard[x][y];\n        if (cell.bomb) {\n            clearInterval(timerID);\n            for (let i = 0; i < mines.length; i++) {\n                newBoard[mines[i][0]][mines[i][1]].fired = true;\n            }\n            setField(newBoard);\n        } else {\n            let revealedSpaces = revealCells(newBoard, x, y, emptySpacesLeft);\n            setField(revealedSpaces.arr);\n            setEmptySpacesLeft(revealedSpaces.emptySpacesLeft);\n        }\n    }\n\n    return (\n        <div className=\"field\">\n            {field.map((row, index1) => {\n                return (\n                    <div key={index1}>\n                        {row.map((cell, index2) => {\n                            return <Cell details={cell} key={index2} updateFlag={updateFlag} revealCell={revealCell} />\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\n\nexport default Field;"],"mappings":"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"},"metadata":{},"sourceType":"module"}